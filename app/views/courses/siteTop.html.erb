<!doctype html>
<html>
  <head>
    <meta charset="utf-8">
    <title>サイトトップ</title>

    <%= stylesheet_link_tag 'siteTop', media: 'all', 'data-turbolinks-track': 'reload' %>
  </head>
  <body>
  <div>
    <% if user_signed_in? %>
      <%= button_to "ログアウト", destroy_user_session_path, method: :delete, class: "loginButton" %>
    <% else %>
      <!-- ログインボタン -->
      <button class="loginButton" onclick="location.href='/courses/login.html'">ログイン</button>
    <% end %>

    <!-- サイトトップボタン -->
    <button class="siteTopButton" onclick="location.href='/courses/siteTop.html'">サイトトップ</button>
    <!-- スライドの外枠 -->
    <div class="slide-wrapper">
      <!-- スライド（コンテンツ） -->
      <div id="slide" class="slide">
        <div>
        <%= image_tag 'tuutenkaku.jpg' %>
        </div>
        <div>
          <%= image_tag 'nankinmati.jpg' %>
        </div>
        <div>
          <%= image_tag 'kiyomizudera.jpg' %>
        </div>
      </div>
      <!-- 左右のボタン -->
      <span id="prev" class="prev"></span>
      <span id="next" class="next"></span>
      <!-- インジケーター -->
      <ul class="indicator" id="indicator">
        <li class="list"></li>
        <li class="list"></li>
        <li class="list"></li>
      </ul>
    </div>
  </div>
  <div>
    <div class="divcenter">
      <div class="recommendRoute1">
        
      </div>
      <!-- 経路検索ボタン -->
    <button class="searchButton" onclick="location.href='/courses/new.html'">経路検索</button>
    </div>
  </div>
  </body>
</html>
<script>
const slide = document.getElementById('slide');
const prev = document.getElementById('prev');
const next = document.getElementById('next');
const indicator = document.getElementById('indicator');
const lists = document.querySelectorAll('.list');
const totalSlides = lists.length;
let count = 0;
let autoPlayInterval;
function updateListBackground() {
  for (let i = 0; i < lists.length; i++) {
    lists[i].style.backgroundColor = i === count % totalSlides ? '#000' : '#fff';
  }
}
function nextClick() {
  slide.classList.remove(`slide${count % totalSlides + 1}`);
  count++;
  slide.classList.add(`slide${count % totalSlides + 1}`);
  updateListBackground();
}
function prevClick() {
  slide.classList.remove(`slide${count % totalSlides + 1}`);
  count--;
  if (count < 0) count = totalSlides - 1;
  slide.classList.add(`slide${count % totalSlides + 1}`);
  updateListBackground();
}
function startAutoPlay() {
  autoPlayInterval = setInterval(nextClick, 3000);
}
function resetAutoPlayInterval() {
  clearInterval(autoPlayInterval);
  startAutoPlay();
}
next.addEventListener('click', () => {
  nextClick();
  resetAutoPlayInterval();
});
prev.addEventListener('click', () => {
  prevClick();
  resetAutoPlayInterval();
});
indicator.addEventListener('click', (event) => {
  if (event.target.classList.contains('list')) {
    const index = Array.from(lists).indexOf(event.target);
    slide.classList.remove(`slide${count % totalSlides + 1}`);
    count = index;
    slide.classList.add(`slide${count % totalSlides + 1}`);
    updateListBackground();
    resetAutoPlayInterval();
  }
});
startAutoPlay();

</script>

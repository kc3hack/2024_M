<html>
	<head>
		<title>Route Map</title>
		<script src="https://polyfill.io/v3/polyfill.min.js?features=default"></script>
	</head>
	<body>
		<div><p id="route-time"></p></div>
		<div>
			<% @course.each do |t| %>
				<div class="startdestination">
					<%= t.start %>
					<%= t.waypoints%>
					<%= t.destination %>
				</div>
			<% end %>
		</div>
		<div id="map" style="width: 100vw; height: 80vh;"></div>
        <input id="button_next" type="button" value="次の経路を表示" onclick="nextRoutes()">
		<div id="edit_area">ここに調べた結果が出てきます。</div>
        <%= form_for @history do |f| %>
                <%= f.label :history %>
                <%= f.text_field :history, :size => 140 %>
                <br>
            <%= f.submit "履歴に保存する（投稿）" %>
        <% end %>
	</body>
</html>
<script>
	var directionsService;
	var directionsRenderer;
	var distanceMatrixservice;
	const start = "<%= @courses[-1].start %>";
	const destination = "<%= @courses[-1].destination %>";
	const waypoint = "<%= @courses[-1].waypoints %>";
    var waypoints = waypoint.split(",");
	const transportation = "<%= @courses[-1].transportation_origin %>";
	const tmp = "<%= @courses[-1].transportation %>";
	var tmps = tmp.split(",");
	const mar = [];
	const routes = [];
	const transportations = [];
	let count = 0;
	let his = 0;
	let history = start;
    let countroute = 2;
    const bottom = document.getElementById('button_next');

    routes.push(start);
    if(waypoints[0]!=""){
        for (var k in waypoints) {
            routes.push(waypoints[k]);
        }
    }
    routes.push(destination);

	transportations.push(transportation);
	for(var i in tmps){
		transportations.push(tmps[i]);
	}

	function resolveAfter05Seconds() {
		return new Promise((resolve) => {
			setTimeout(() => {
			resolve('resolved');
			}, 500);
		});
	}

    function nextRoutes(){
        if(countroute===routes.length){
            historyDisplay();
        }else{
            searchRoutes();
        }
    }

    async function searchRoutes(){
		//マップを表示する要素を指定
		var target = document.getElementById('map');
		var geocoder = new google.maps.Geocoder();

		directionsService = new google.maps.DirectionsService();
		directionsRenderer = new google.maps.DirectionsRenderer();
		distanceMatrixservice = new google.maps.DistanceMatrixService();

        geocoder.geocode({ address: routes[countroute] }, function(results, status){
            if (status === 'OK' && results[0]){
                mar.push({
                    "name": routes[countroute],
                    'lat': results[0].geometry.location.lat(),
                    'lng': results[0].geometry.location.lng()
                });
            }else{
                //住所が存在しない場合の処理
                alert('住所が正しくないか存在しません。');
                target.style.display='none';
            }
        });
        const result = await resolveAfter05Seconds();
        countroute+=1;
        if(countroute === routes.length){
            console.log("a");
            bottom.value = '履歴を表示する';
        }
        setLocation(mar);
    }

	async function initMap() {

		//マップを表示する要素を指定
		var target = document.getElementById('map');
		var geocoder = new google.maps.Geocoder();

		directionsService = new google.maps.DirectionsService();
		directionsRenderer = new google.maps.DirectionsRenderer();
		distanceMatrixservice = new google.maps.DistanceMatrixService();

        geocoder.geocode({ address: routes[0] }, function(results, status){
            if (status === 'OK' && results[0]){
                mar.push({
                    "name": routes[0],
                    'lat': results[0].geometry.location.lat(),
                    'lng': results[0].geometry.location.lng()
                });
            }else{
                //住所が存在しない場合の処理
                alert('住所が正しくないか存在しません。');
                target.style.display='none';
            }
            var markerLatLng = new google.maps.LatLng({lat: mar[0]['lat'], lng: mar[0]['lng']});
            map = new google.maps.Map(target, {
                center: markerLatLng,
                zoom: 15
            });
        });
        const result = await resolveAfter05Seconds();
        geocoder.geocode({ address: routes[1] }, function(results, status){
            if (status === 'OK' && results[0]){
                mar.push({
                    "name": routes[1],
                    'lat': results[0].geometry.location.lat(),
                    'lng': results[0].geometry.location.lng()
                });
            }else{
                //住所が存在しない場合の処理
                alert('住所が正しくないか存在しません。');
                target.style.display='none';
            }
            setLocation(mar);
        });
	}

	function setLocation(ma){
    	// 所要時間取得
		if(transportations[count]==="walking"){
			distanceMatrixservice.getDistanceMatrix({
				origins: [ma[count]["lat"] +"," + ma[count]["lng"]], // 出発地
				destinations: [ma[count+1]["lat"] +"," + ma[count+1]["lng"]], // 目的地
				travelMode: google.maps.TravelMode.WALKING, // 移動手段
			}, timeRequired)
			directionsService.route({
				origin: routes[count],
				destination: routes[count+1],
				travelMode: google.maps.TravelMode.WALKING
			}, function(response, status) {
				if (status === google.maps.DirectionsStatus.OK) {
					// ルート検索の結果を地図上に描画
					directionsRenderer.setMap(map);
					directionsRenderer.setDirections(response);
				}
			});
		}else if(transportations[count]==="driving"){
			distanceMatrixservice.getDistanceMatrix({
				origins: [ma[count]["lat"] +"," + ma[count]["lng"]], // 出発地
				destinations: [ma[count+1]["lat"] +"," + ma[count+1]["lng"]], // 目的地
				travelMode: google.maps.TravelMode.DRIVING, // 移動手段
			}, timeRequired)
			directionsService.route({
				origin: routes[count],
				destination: routes[count+1],
				travelMode: google.maps.TravelMode.DRIVING
			}, function(response, status) {
				if (status === google.maps.DirectionsStatus.OK) {
					// ルート検索の結果を地図上に描画
					directionsRenderer.setMap(map);
					directionsRenderer.setDirections(response);
				}
			});
		}
        count+=1;
	}

	async function timeRequired(response, status) {
		if(status == "OK") {
			var origins = response.originAddresses;
			var destinations = response.destinationAddresses;
			for (var i = 0; i < origins.length; i++) {
				var results = response.rows[i].elements;
				for (var j = 0; j < results.length; j++) {
					var element = results[j];
					var distance = element.distance.text;
					var duration = element.duration.text;
					var from = origins[i];
					var to = destinations[j];
				}
			}
			const result = await resolveAfter05Seconds();
			if(his==0){
				history += ",";
				history += (transportations[his]);
				history += ",";
				history += (duration);
				history += ",";
				history += (routes[his+1]);
				his+=1;
			}else{
				history += ",";
				history += (transportations[his]);
				history += ",";
				history += (duration);
				history += ",";
				history += (routes[his+1]);
				his+=1;
			}
			var routeTime = document.getElementById("route-time");
			routeTime.innerHTML = "およそ" + duration + "で着きます"
		}
	}

	async function historyDisplay(){
		document.getElementById('edit_area').textContent = history ;
	}
</script>

<script src="//maps.google.com/maps/api/js?key=<%= ENV['GOOGLE_MAP_KEY'] %>&callback=initMap"></script>